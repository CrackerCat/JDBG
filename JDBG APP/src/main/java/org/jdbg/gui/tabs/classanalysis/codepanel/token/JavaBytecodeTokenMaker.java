// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: C:/Users/Roger Du/Documents/projects/Jdbg/JDBG APP/src/main/java/org/jdbg/gui/tabs/classanalysis/codepanel/token/JavaBytecodeTokenMaker.flex

/*
 * 12/06/2004
 *
 * JavaBytecodeTokenMaker.java - An object that can take a chunk of text and
 * return a linked list of tokens representing X86 assembler.
 *
 * This library is distributed under a modified BSD license.  See the included
 * LICENSE file for details.
 */
package org.jdbg.gui.tabs.classanalysis.codepanel.token;

import java.io.*;
import javax.swing.text.Segment;

import org.fife.ui.rsyntaxtextarea.*;


/**
 * This class takes plain text and returns tokens representing x86
 * assembler.<p>
 *
 * This implementation was created using
 * <a href="https://www.jflex.de/">JFlex</a> 1.4.1; however, the generated file
 * was modified for performance.  Memory allocation needs to be almost
 * completely removed to be competitive with the handwritten lexers (subclasses
 * of <code>AbstractTokenMaker</code>), so this class has been modified so that
 * Strings are never allocated (via yytext()), and the scanner never has to
 * worry about refilling its buffer (needlessly copying chars around).
 * We can achieve this because RText always scans exactly 1 line of tokens at a
 * time, and hands the scanner this line as an array of characters (a Segment
 * really).  Since tokens contain pointers to char arrays instead of Strings
 * holding their contents, there is no need for allocating new memory for
 * Strings.<p>
 *
 * The actual algorithm generated for scanning has, of course, not been
 * modified.<p>
 *
 * If you wish to regenerate this file yourself, keep in mind the following:
 * <ul>
 *   <li>The generated <code>JavaBytecodeTokenMaker.java</code> file will contain two
 *       definitions of both <code>zzRefill</code> and <code>yyreset</code>.
 *       You should hand-delete the second of each definition (the ones
 *       generated by the lexer), as these generated methods modify the input
 *       buffer, which we'll never have to do.</li>
 *   <li>You should also change the declaration/definition of zzBuffer to NOT
 *       be initialized.  This is a needless memory allocation for us since we
 *       will be pointing the array somewhere else anyway.</li>
 *   <li>You should NOT call <code>yylex()</code> on the generated scanner
 *       directly; rather, you should use <code>getTokenList</code> as you would
 *       with any other <code>TokenMaker</code> instance.</li>
 * </ul>
 *
 * @author Robert Futrell
 * @version 0.2
 *
 */

@SuppressWarnings("fallthrough")
public class JavaBytecodeTokenMaker extends AbstractJFlexTokenMaker {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 1
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\36\u0200\1\u0300\1\u0400\266\u0200\10\u0500\u1020\u0200";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\3\22\0\1\1"+
    "\1\5\1\6\2\0\1\7\1\5\1\10\2\0\2\11"+
    "\1\12\1\11\1\12\1\11\1\13\1\14\1\15\1\16"+
    "\2\17\4\20\1\21\1\22\3\5\2\0\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\12\1\0\1\12\1\5\1\55\1\0\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\0\1\5\1\0\1\5\6\0\1\3\252\0\2\56"+
    "\115\0\1\57\u01a8\0\2\3\u0100\0\1\60\325\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1536];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\23\1\1\11\1\12\1\13\1\1\1\14\66\1"+
    "\21\0\16\1\2\15\11\1\1\15\22\1\1\15\5\1"+
    "\3\15\3\1\1\15\26\0\20\1\1\15\32\1\15\0"+
    "\4\1\1\15\45\1\5\0\1\15\5\0\4\1\1\15"+
    "\36\1\11\0\43\1\10\0\31\1\7\0\23\1\6\0"+
    "\12\1\5\0\5\1\2\0\3\1\1\0\3\1\1\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[467];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\142\0\223\0\142\0\142\0\304\0\365"+
    "\0\u0126\0\u0157\0\u0188\0\u01b9\0\u01ea\0\u021b\0\u024c\0\u027d"+
    "\0\u02ae\0\u02df\0\u0310\0\u0341\0\u0372\0\u03a3\0\u03d4\0\u0405"+
    "\0\u0436\0\u0467\0\u0498\0\u04c9\0\u04fa\0\u052b\0\142\0\142"+
    "\0\u055c\0\u055c\0\u058d\0\u05be\0\u05ef\0\u0620\0\u0651\0\u0682"+
    "\0\u06b3\0\u06e4\0\u0715\0\u0746\0\u0777\0\u07a8\0\u07d9\0\u080a"+
    "\0\u083b\0\u086c\0\u089d\0\u08ce\0\u08ff\0\u0930\0\u0961\0\u0992"+
    "\0\u09c3\0\u09f4\0\u0a25\0\u0a56\0\u0a87\0\u0ab8\0\u0ae9\0\u0b1a"+
    "\0\u0b4b\0\u0b7c\0\u0bad\0\u0bde\0\u0c0f\0\u0c40\0\u0c71\0\u0ca2"+
    "\0\u0cd3\0\u0d04\0\u0d35\0\u0d66\0\u0d97\0\u0dc8\0\u0df9\0\u0e2a"+
    "\0\u0e5b\0\u0e8c\0\u0ebd\0\u0eee\0\u0f1f\0\u0f50\0\u0f81\0\u0fb2"+
    "\0\u0fe3\0\u1014\0\u1045\0\u1076\0\u10a7\0\u10d8\0\u1109\0\u113a"+
    "\0\u116b\0\u119c\0\u11cd\0\u11fe\0\u122f\0\u1260\0\u1291\0\u12c2"+
    "\0\u12f3\0\u1324\0\u1355\0\u1386\0\u13b7\0\u13e8\0\u1419\0\u144a"+
    "\0\u147b\0\u14ac\0\u14dd\0\u150e\0\u153f\0\u1570\0\u15a1\0\u024c"+
    "\0\u055c\0\u15d2\0\u1603\0\u1634\0\u1665\0\u1696\0\u16c7\0\u16f8"+
    "\0\u1729\0\u175a\0\u178b\0\u17bc\0\u17ed\0\u181e\0\u184f\0\u1880"+
    "\0\u18b1\0\u18e2\0\u1913\0\u1944\0\u1975\0\u19a6\0\u19d7\0\u1a08"+
    "\0\u1a39\0\u1a6a\0\u1a9b\0\u1acc\0\u1afd\0\u1b2e\0\u1b5f\0\u1b90"+
    "\0\u1bc1\0\u1bf2\0\u1c23\0\u1c54\0\u1c85\0\u1cb6\0\u1ce7\0\u1d18"+
    "\0\u1d49\0\142\0\u1d7a\0\u1dab\0\u1ddc\0\u1e0d\0\u1e3e\0\u1e6f"+
    "\0\u1ea0\0\u1ed1\0\u1f02\0\u1f33\0\u1f64\0\u1f95\0\u1fc6\0\u1ff7"+
    "\0\u2028\0\u2059\0\u208a\0\u20bb\0\u20ec\0\u211d\0\u214e\0\u217f"+
    "\0\u21b0\0\u21e1\0\u2212\0\u2243\0\u2274\0\u1c54\0\u1cb6\0\u22a5"+
    "\0\u22d6\0\u2307\0\u2338\0\u2369\0\u239a\0\u23cb\0\u23fc\0\u242d"+
    "\0\u245e\0\u248f\0\u24c0\0\u24f1\0\u2522\0\u2553\0\u2584\0\u25b5"+
    "\0\u25e6\0\u2617\0\u2648\0\u2679\0\u26aa\0\u26db\0\u270c\0\u273d"+
    "\0\u276e\0\u279f\0\u27d0\0\u2801\0\u2832\0\u2863\0\u2894\0\u28c5"+
    "\0\u28f6\0\u2927\0\u2958\0\u2989\0\u29ba\0\u29eb\0\u2a1c\0\u2a4d"+
    "\0\u2a7e\0\u2aaf\0\u2ae0\0\u2b11\0\u2b42\0\u2b73\0\u2ba4\0\u2bd5"+
    "\0\u2c06\0\u2c37\0\u2c68\0\u2c99\0\u2cca\0\u2cfb\0\u2d2c\0\u2d5d"+
    "\0\u2d8e\0\u2dbf\0\u2df0\0\u2e21\0\u2e52\0\u2e83\0\u2eb4\0\u2ee5"+
    "\0\u2f16\0\u2f47\0\u2f78\0\u2fa9\0\u2fda\0\u300b\0\u303c\0\u306d"+
    "\0\u309e\0\u30cf\0\u3100\0\u3131\0\u3162\0\u3193\0\u31c4\0\u31f5"+
    "\0\u3226\0\u3257\0\u3288\0\u32b9\0\u32ea\0\u331b\0\u334c\0\u337d"+
    "\0\u33ae\0\u33df\0\u3410\0\u3441\0\u3472\0\u34a3\0\u34d4\0\u3505"+
    "\0\u3536\0\u3567\0\u3598\0\u35c9\0\u35fa\0\u362b\0\u365c\0\u368d"+
    "\0\u36be\0\u36ef\0\u3720\0\u3751\0\u3782\0\u37b3\0\u37e4\0\u3815"+
    "\0\u3846\0\u3877\0\u38a8\0\u38d9\0\u390a\0\u393b\0\u396c\0\u399d"+
    "\0\u39ce\0\u39ff\0\u3a30\0\u3a61\0\u3a92\0\u3ac3\0\u3af4\0\u3b25"+
    "\0\u3b56\0\u3b87\0\u3bb8\0\u3be9\0\u3c1a\0\u3c4b\0\u3c7c\0\u3cad"+
    "\0\u3cde\0\u3d0f\0\u3d40\0\u3d71\0\u3da2\0\u3dd3\0\u3e04\0\u3e35"+
    "\0\u3e66\0\u3e97\0\u3ec8\0\u3ef9\0\u3f2a\0\u3f5b\0\u3f8c\0\u3fbd"+
    "\0\u3fee\0\u401f\0\u4050\0\u4081\0\u40b2\0\u40e3\0\u4114\0\u4145"+
    "\0\u4176\0\u41a7\0\u41d8\0\u4209\0\u423a\0\u426b\0\u429c\0\u42cd"+
    "\0\u42fe\0\u432f\0\u4360\0\u4391\0\u43c2\0\u43f3\0\u4424\0\u4455"+
    "\0\u4486\0\u44b7\0\u44e8\0\u4519\0\u454a\0\u457b\0\u45ac\0\u45dd"+
    "\0\u460e\0\u463f\0\u4670\0\u46a1\0\u46d2\0\u4703\0\u4734\0\u4765"+
    "\0\u4796\0\u47c7\0\u47f8\0\u4829\0\u485a\0\u488b\0\u48bc\0\u48ed"+
    "\0\u491e\0\u494f\0\u4980\0\u49b1\0\u49e2\0\u4a13\0\u4a44\0\u4a75"+
    "\0\u4aa6\0\u4ad7\0\u4b08\0\u4b39\0\u4b6a\0\u4b9b\0\u4bcc\0\u4bfd"+
    "\0\u4c2e\0\u4c5f\0\u4c90\0\u4cc1\0\u4cf2\0\u4d23\0\u4d54\0\u4d85"+
    "\0\u4db6\0\u4de7\0\u4e18\0\u4e49\0\u4e7a\0\u4eab\0\u4edc\0\u4f0d"+
    "\0\u4f3e\0\u4f6f\0\u4fa0\0\u4fd1\0\u5002\0\u5033\0\u5064\0\u5095"+
    "\0\u50c6\0\u50f7\0\u5128\0\u5159\0\u518a\0\u51bb\0\u51ec\0\u521d"+
    "\0\u524e\0\u527f\0\u52b0\0\u52e1\0\u5312\0\u5343\0\u5374\0\u53a5"+
    "\0\u53d6\0\u5407\0\u5438\0\u5469\0\u549a\0\u54cb\0\u54fc\0\u552d"+
    "\0\u555e\0\u558f\0\u55c0\0\u55f1\0\u5622\0\u5653\0\u5684\0\u56b5"+
    "\0\u56e6\0\u5717\0\u5748";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[467];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\0\1\4\1\6\1\7\1\6"+
    "\1\10\1\6\1\3\6\11\1\3\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\17\1\22\1\23"+
    "\1\17\1\24\1\25\1\26\1\17\1\27\1\17\1\30"+
    "\1\31\1\32\2\17\1\33\4\17\1\34\1\35\2\3"+
    "\1\4\1\5\1\0\1\4\1\6\1\7\1\36\1\10"+
    "\1\6\1\3\6\11\1\3\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\17\1\22\1\23\1\17"+
    "\1\24\1\25\1\26\1\17\1\27\1\17\1\30\1\31"+
    "\1\32\2\17\1\33\4\17\1\34\1\35\1\3\62\0"+
    "\1\4\2\0\1\4\54\0\6\7\1\37\52\7\10\10"+
    "\1\40\50\10\1\41\2\0\1\41\1\0\2\41\1\0"+
    "\1\41\2\0\6\11\1\42\1\41\33\17\3\41\2\12"+
    "\3\0\54\12\1\41\2\0\1\41\1\0\2\41\1\0"+
    "\1\41\2\0\6\17\1\42\1\41\1\43\1\17\1\44"+
    "\10\17\1\45\1\17\1\46\3\17\1\47\1\50\1\51"+
    "\7\17\1\41\1\52\2\41\2\0\1\41\1\0\2\41"+
    "\1\0\1\41\2\0\6\17\1\42\1\41\1\43\7\17"+
    "\1\53\22\17\1\54\3\41\2\0\1\41\1\0\2\41"+
    "\1\0\1\41\2\0\6\17\1\42\1\41\1\43\6\17"+
    "\1\55\23\17\4\41\2\0\1\41\1\0\2\41\1\0"+
    "\1\41\2\0\2\17\1\56\3\17\1\42\1\41\1\57"+
    "\1\17\1\60\1\61\7\17\1\45\1\62\1\63\3\17"+
    "\1\64\1\65\1\17\1\66\6\17\1\41\1\67\2\41"+
    "\2\0\1\41\1\0\2\41\1\0\1\41\2\0\6\17"+
    "\1\42\1\41\33\17\4\41\2\0\1\41\1\0\2\41"+
    "\1\0\1\41\2\0\2\17\1\70\3\17\1\42\1\41"+
    "\1\57\1\17\1\71\1\61\7\17\1\45\1\62\1\63"+
    "\3\17\1\64\1\65\10\17\1\41\1\67\2\41\2\0"+
    "\1\41\1\0\2\41\1\0\1\41\2\0\6\17\1\42"+
    "\1\41\4\17\1\72\11\17\1\73\14\17\4\41\2\0"+
    "\1\41\1\0\2\41\1\0\1\41\2\0\2\17\1\74"+
    "\3\17\1\42\1\41\1\75\1\17\1\76\1\61\1\17"+
    "\1\77\2\17\1\100\2\17\1\45\1\62\1\101\1\102"+
    "\2\17\1\64\1\103\1\17\1\104\2\17\1\105\3\17"+
    "\1\106\1\107\2\41\2\0\1\41\1\0\2\41\1\0"+
    "\1\41\2\0\6\17\1\42\1\41\22\17\1\102\10\17"+
    "\1\41\1\110\2\41\2\0\1\41\1\0\2\41\1\0"+
    "\1\41\2\0\2\17\1\111\3\17\1\42\1\41\1\75"+
    "\1\17\1\112\1\113\4\17\1\114\2\17\1\45\1\62"+
    "\1\63\1\115\2\17\1\64\1\103\1\17\1\104\2\17"+
    "\1\105\3\17\1\116\1\107\2\41\2\0\1\41\1\0"+
    "\2\41\1\0\1\41\2\0\6\17\1\42\1\41\16\17"+
    "\1\117\5\17\1\120\6\17\4\41\2\0\1\41\1\0"+
    "\2\41\1\0\1\41\2\0\6\17\1\42\1\41\4\17"+
    "\1\121\11\17\1\122\14\17\4\41\2\0\1\41\1\0"+
    "\2\41\1\0\1\41\2\0\6\17\1\42\1\41\16\17"+
    "\1\123\5\17\1\72\6\17\4\41\2\0\1\41\1\0"+
    "\2\41\1\0\1\41\2\0\6\17\1\42\1\41\4\17"+
    "\1\124\26\17\4\41\2\0\1\41\1\0\2\41\1\0"+
    "\1\41\2\0\6\17\1\42\1\41\1\43\7\17\1\53"+
    "\15\17\1\125\4\17\1\54\3\41\2\0\1\41\1\0"+
    "\2\41\1\0\1\41\2\0\6\17\1\42\1\41\1\126"+
    "\32\17\4\41\2\0\1\41\1\0\2\41\1\0\1\41"+
    "\2\0\6\17\1\42\1\41\10\17\1\127\22\17\1\130"+
    "\2\41\15\0\1\131\5\0\1\132\1\0\1\133\1\134"+
    "\1\0\1\135\2\0\1\136\2\0\1\137\1\140\1\141"+
    "\1\142\2\0\1\143\1\144\1\0\1\145\2\0\1\146"+
    "\3\0\1\136\1\144\24\0\1\147\7\0\1\150\15\0"+
    "\1\151\4\0\1\150\15\0\6\36\2\0\33\36\3\0"+
    "\1\41\2\0\1\41\1\0\2\41\1\0\1\41\2\0"+
    "\47\41\2\0\1\41\1\0\2\41\1\0\1\41\2\0"+
    "\6\17\1\42\1\41\13\17\1\152\6\17\1\153\10\17"+
    "\1\41\1\154\2\41\2\0\1\41\1\0\2\41\1\0"+
    "\1\41\2\0\6\17\1\42\1\41\16\17\1\155\14\17"+
    "\4\41\2\0\1\41\1\0\2\41\1\0\1\41\2\0"+
    "\6\17\1\42\1\41\16\17\1\156\14\17\4\41\2\0"+
    "\1\41\1\0\2\41\1\0\1\41\2\0\6\17\1\42"+
    "\1\41\4\17\1\157\26\17\4\41\2\0\1\41\1\0"+
    "\2\41\1\0\1\41\2\0\6\17\1\42\1\41\4\17"+
    "\1\160\14\17\1\161\11\17\4\41\2\0\1\41\1\0"+
    "\2\41\1\0\1\41\2\0\6\17\1\42\1\41\23\17"+
    "\1\162\7\17\4\41\2\0\1\41\1\0\2\41\1\0"+
    "\1\41\2\0\6\17\1\42\1\41\7\17\1\163\23\17"+
    "\4\41\2\0\1\41\1\0\2\41\1\0\1\41\2\0"+
    "\33\41\1\164\13\41\2\0\1\41\1\0\2\41\1\0"+
    "\1\41\2\0\6\17\1\42\1\41\17\17\1\165\13\17"+
    "\4\41\2\0\1\41\1\0\2\41\1\0\1\41\2\0"+
    "\27\41\1\166\17\41\2\0\1\41\1\0\2\41\1\0"+
    "\1\41\2\0\6\17\1\42\1\41\4\17\1\167\26\17"+
    "\4\41\2\0\1\41\1\0\2\41\1\0\1\41\2\0"+
    "\6\17\1\42\1\41\5\17\1\170\2\17\1\170\2\17"+
    "\1\170\17\17\1\171\3\41\2\0\1\41\1\0\2\41"+
    "\1\0\1\41\2\0\6\17\1\42\1\41\3\17\1\172"+
    "\7\17\1\152\6\17\1\153\10\17\1\41\1\154\2\41"+
    "\2\0\1\41\1\0\2\41\1\0\1\41\2\0\6\17"+
    "\1\42\1\41\14\17\1\173\1\17\1\174\14\17\4\41"+
    "\2\0\1\41\1\0\2\41\1\0\1\41\2\0\6\17"+
    "\1\42\1\41\10\17\1\175\22\17\1\176\3\41\2\0"+
    "\1\41\1\0\2\41\1\0\1\41\2\0\6\17\1\42"+
    "\1\41\24\17\1\177\6\17\4\41\2\0\1\41\1\0"+
    "\2\41\1\0\1\41\2\0\6\17\1\42\1\41\4\17"+
    "\1\200\26\17\4\41\2\0\1\41\1\0\2\41\1\0"+
    "\1\41\2\0\6\17\1\42\1\41\4\17\1\201\26\17"+
    "\4\41\2\0\1\41\1\0\2\41\1\0\1\41\2\0"+
    "\6\17\1\42\1\41\23\17\1\162\1\202\6\17\4\41"+
    "\2\0\1\41\1\0\2\41\1\0\1\41\2\0\6\17"+
    "\1\42\1\41\17\17\1\203\13\17\4\41\2\0\1\41"+
    "\1\0\2\41\1\0\1\41\2\0\33\41\1\164\1\204"+
    "\12\41\2\0\1\41\1\0\2\41\1\0\1\41\2\0"+
    "\6\17\1\42\1\41\3\17\1\170\4\17\1\170\2\17"+
    "\1\170\17\17\1\171\3\41\2\0\1\41\1\0\2\41"+
    "\1\0\1\41\2\0\6\17\1\42\1\41\14\17\1\173"+
    "\1\17\1\205\14\17\4\41\2\0\1\41\1\0\2\41"+
    "\1\0\1\41\2\0\6\17\1\42\1\41\23\17\1\206"+
    "\7\17\4\41\2\0\1\41\1\0\2\41\1\0\1\41"+
    "\2\0\6\17\1\42\1\41\23\17\1\207\7\17\4\41"+
    "\2\0\1\41\1\0\2\41\1\0\1\41\2\0\6\17"+
    "\1\42\1\41\1\17\3\170\1\17\1\170\5\17\1\170"+
    "\6\17\1\170\10\17\1\41\1\171\2\41\2\0\1\41"+
    "\1\0\2\41\1\0\1\41\2\0\6\17\1\42\1\41"+
    "\3\17\1\172\7\17\1\152\1\17\1\172\4\17\1\153"+
    "\10\17\1\41\1\154\2\41\2\0\1\41\1\0\2\41"+
    "\1\0\1\41\2\0\6\17\1\42\1\41\16\17\1\210"+
    "\14\17\4\41\2\0\1\41\1\0\2\41\1\0\1\41"+
    "\2\0\6\17\1\42\1\41\4\17\1\211\1\17\1\212"+
    "\4\17\1\212\1\17\1\213\14\17\1\214\4\41\2\0"+
    "\1\41\1\0\2\41\1\0\1\41\2\0\6\17\1\42"+
    "\1\41\15\17\1\215\15\17\4\41\2\0\1\41\1\0"+
    "\2\41\1\0\1\41\2\0\6\17\1\42\1\41\4\17"+
    "\1\200\15\17\1\216\2\17\1\217\5\17\1\41\1\220"+
    "\2\41\2\0\1\41\1\0\2\41\1\0\1\41\2\0"+
    "\6\17\1\42\1\41\21\17\1\170\11\17\4\41\2\0"+
    "\1\41\1\0\2\41\1\0\1\41\2\0\6\17\1\42"+
    "\1\41\7\17\1\221\13\17\1\162\1\202\6\17\4\41"+
    "\2\0\1\41\1\0\2\41\1\0\1\41\2\0\6\17"+
    "\1\42\1\41\22\17\1\222\10\17\1\41\1\223\2\41"+
    "\2\0\1\41\1\0\2\41\1\0\1\41\2\0\6\17"+
    "\1\42\1\41\16\17\1\102\14\17\4\41\2\0\1\41"+
    "\1\0\2\41\1\0\1\41\2\0\25\41\1\224\21\41"+
    "\2\0\1\41\1\0\2\41\1\0\1\41\2\0\17\41"+
    "\1\225\13\41\1\164\1\204\12\41\2\0\1\41\1\0"+
    "\2\41\1\0\1\41\2\0\31\41\1\171\15\41\2\0"+
    "\1\41\1\0\2\41\1\0\1\41\2\0\6\17\1\42"+
    "\1\41\3\17\1\170\1\17\1\170\2\17\1\170\22\17"+
    "\1\171\3\41\2\0\1\41\1\0\2\41\1\0\1\41"+
    "\2\0\6\17\1\42\1\41\14\17\1\122\1\17\1\174"+
    "\14\17\4\41\2\0\1\41\1\0\2\41\1\0\1\41"+
    "\2\0\6\17\1\42\1\41\2\17\1\226\5\17\1\175"+
    "\22\17\1\176\3\41\2\0\1\41\1\0\2\41\1\0"+
    "\1\41\2\0\6\17\1\42\1\41\15\17\1\227\15\17"+
    "\4\41\2\0\1\41\1\0\2\41\1\0\1\41\2\0"+
    "\6\17\1\42\1\41\16\17\1\230\2\17\1\170\11\17"+
    "\4\41\2\0\1\41\1\0\2\41\1\0\1\41\2\0"+
    "\25\41\1\231\21\41\2\0\1\41\1\0\2\41\1\0"+
    "\1\41\2\0\6\17\1\42\1\41\15\17\1\232\15\17"+
    "\4\41\2\0\1\41\1\0\2\41\1\0\1\41\2\0"+
    "\6\17\1\42\1\41\13\17\1\233\17\17\4\41\2\0"+
    "\1\41\1\0\2\41\1\0\1\41\2\0\6\17\1\42"+
    "\1\41\26\17\1\234\4\17\4\41\2\0\1\41\1\0"+
    "\2\41\1\0\1\41\2\0\6\17\1\42\1\41\17\17"+
    "\1\170\13\17\4\41\2\0\1\41\1\0\2\41\1\0"+
    "\1\41\2\0\6\17\1\42\1\41\17\17\1\235\13\17"+
    "\4\41\2\0\1\41\1\0\2\41\1\0\1\41\2\0"+
    "\6\17\1\42\1\41\23\17\1\236\7\17\4\41\2\0"+
    "\1\41\1\0\2\41\1\0\1\41\2\0\6\17\1\42"+
    "\1\41\1\122\32\17\4\41\2\0\1\41\1\0\2\41"+
    "\1\0\1\41\2\0\6\17\1\42\1\41\1\17\1\237"+
    "\31\17\4\41\2\0\1\41\1\0\2\41\1\0\1\41"+
    "\2\0\6\17\1\42\1\41\3\17\1\240\27\17\4\41"+
    "\2\0\1\41\1\0\2\41\1\0\1\41\2\0\13\41"+
    "\1\241\32\41\24\0\3\242\1\0\1\242\5\0\1\242"+
    "\6\0\1\242\11\0\1\242\27\0\1\243\7\0\1\244"+
    "\1\0\1\243\4\0\1\245\11\0\1\245\42\0\1\246"+
    "\52\0\1\247\22\0\1\247\31\0\1\250\1\0\1\251"+
    "\4\0\1\251\1\0\1\252\14\0\1\253\43\0\1\254"+
    "\61\0\1\255\66\0\1\256\40\0\1\257\15\0\1\260"+
    "\2\0\1\261\6\0\1\260\45\0\1\242\43\0\1\262"+
    "\63\0\1\263\13\0\1\264\1\265\56\0\1\266\11\0"+
    "\1\266\42\0\1\142\55\0\1\244\6\0\1\245\11\0"+
    "\1\245\43\0\1\267\41\0\1\270\35\0\1\41\2\0"+
    "\1\41\1\0\2\41\1\0\1\41\2\0\6\17\1\42"+
    "\1\41\16\17\1\271\14\17\4\41\2\0\1\41\1\0"+
    "\2\41\1\0\1\41\2\0\6\17\1\42\1\41\23\17"+
    "\1\272\7\17\4\41\2\0\1\41\1\0\2\41\1\0"+
    "\1\41\2\0\33\41\1\273\13\41\2\0\1\41\1\0"+
    "\2\41\1\0\1\41\2\0\6\17\1\42\1\41\15\17"+
    "\1\274\15\17\4\41\2\0\1\41\1\0\2\41\1\0"+
    "\1\41\2\0\6\17\1\42\1\41\1\275\32\17\4\41"+
    "\2\0\1\41\1\0\2\41\1\0\1\41\2\0\6\17"+
    "\1\42\1\41\26\17\1\276\4\17\4\41\2\0\1\41"+
    "\1\0\2\41\1\0\1\41\2\0\6\17\1\42\1\41"+
    "\23\17\1\277\7\17\4\41\2\0\1\41\1\0\2\41"+
    "\1\0\1\41\2\0\6\17\1\42\1\41\1\300\32\17"+
    "\4\41\2\0\1\41\1\0\2\41\1\0\1\41\2\0"+
    "\6\17\1\42\1\41\16\17\1\301\14\17\4\41\2\0"+
    "\1\41\1\0\2\41\1\0\1\41\2\0\6\17\1\42"+
    "\1\41\21\17\1\302\11\17\4\41\2\0\1\41\1\0"+
    "\2\41\1\0\1\41\2\0\26\41\1\303\20\41\2\0"+
    "\1\41\1\0\2\41\1\0\1\41\2\0\6\17\1\42"+
    "\1\41\24\17\1\304\6\17\4\41\2\0\1\41\1\0"+
    "\2\41\1\0\1\41\2\0\34\41\1\305\12\41\2\0"+
    "\1\41\1\0\2\41\1\0\1\41\2\0\6\17\1\42"+
    "\1\41\2\17\1\306\30\17\4\41\2\0\1\41\1\0"+
    "\2\41\1\0\1\41\2\0\6\17\1\42\1\41\3\17"+
    "\1\170\27\17\4\41\2\0\1\41\1\0\2\41\1\0"+
    "\1\41\2\0\6\17\1\42\1\41\17\17\1\307\13\17"+
    "\4\41\2\0\1\41\1\0\2\41\1\0\1\41\2\0"+
    "\6\17\1\42\1\41\15\17\1\310\15\17\4\41\2\0"+
    "\1\41\1\0\2\41\1\0\1\41\2\0\6\17\1\42"+
    "\1\41\25\17\1\170\5\17\4\41\2\0\1\41\1\0"+
    "\2\41\1\0\1\41\2\0\35\41\1\171\11\41\2\0"+
    "\1\41\1\0\2\41\1\0\1\41\2\0\6\17\1\42"+
    "\1\41\13\17\1\170\17\17\4\41\2\0\1\41\1\0"+
    "\2\41\1\0\1\41\2\0\6\17\1\42\1\41\6\17"+
    "\1\170\24\17\4\41\2\0\1\41\1\0\2\41\1\0"+
    "\1\41\2\0\6\17\1\42\1\41\14\17\1\170\6\17"+
    "\1\277\7\17\4\41\2\0\1\41\1\0\2\41\1\0"+
    "\1\41\2\0\6\17\1\42\1\41\1\17\1\170\31\17"+
    "\4\41\2\0\1\41\1\0\2\41\1\0\1\41\2\0"+
    "\2\17\1\311\3\17\1\42\1\41\32\17\1\312\4\41"+
    "\2\0\1\41\1\0\2\41\1\0\1\41\2\0\11\41"+
    "\1\171\35\41\2\0\1\41\1\0\2\41\1\0\1\41"+
    "\2\0\6\17\1\42\1\41\15\17\1\313\15\17\4\41"+
    "\2\0\1\41\1\0\2\41\1\0\1\41\2\0\6\17"+
    "\1\42\1\41\5\17\1\314\14\17\1\315\10\17\1\41"+
    "\1\316\2\41\2\0\1\41\1\0\2\41\1\0\1\41"+
    "\2\0\6\17\1\42\1\41\16\17\1\170\14\17\4\41"+
    "\2\0\1\41\1\0\2\41\1\0\1\41\2\0\6\17"+
    "\1\42\1\41\15\17\1\317\15\17\4\41\2\0\1\41"+
    "\1\0\2\41\1\0\1\41\2\0\6\17\1\42\1\41"+
    "\20\17\1\170\12\17\4\41\2\0\1\41\1\0\2\41"+
    "\1\0\1\41\2\0\6\17\1\42\1\41\4\17\1\170"+
    "\16\17\1\170\7\17\4\41\2\0\1\41\1\0\2\41"+
    "\1\0\1\41\2\0\6\17\1\42\1\41\4\17\1\170"+
    "\11\17\1\320\5\17\1\321\6\17\4\41\2\0\1\41"+
    "\1\0\2\41\1\0\1\41\2\0\6\17\1\42\1\41"+
    "\1\322\7\17\1\323\22\17\1\324\3\41\2\0\1\41"+
    "\1\0\2\41\1\0\1\41\2\0\6\17\1\42\1\41"+
    "\2\17\1\170\30\17\4\41\2\0\1\41\1\0\2\41"+
    "\1\0\1\41\2\0\6\17\1\42\1\41\23\17\1\325"+
    "\7\17\4\41\2\0\1\41\1\0\2\41\1\0\1\41"+
    "\2\0\6\17\1\42\1\41\16\17\1\326\14\17\4\41"+
    "\2\0\1\41\1\0\2\41\1\0\1\41\2\0\33\41"+
    "\1\327\13\41\2\0\1\41\1\0\2\41\1\0\1\41"+
    "\2\0\6\17\1\42\1\41\13\17\1\170\5\17\1\170"+
    "\11\17\4\41\2\0\1\41\1\0\2\41\1\0\1\41"+
    "\2\0\6\17\1\42\1\41\7\17\1\102\23\17\4\41"+
    "\2\0\1\41\1\0\2\41\1\0\1\41\2\0\17\41"+
    "\1\110\27\41\2\0\1\41\1\0\2\41\1\0\1\41"+
    "\2\0\12\41\1\171\34\41\2\0\1\41\1\0\2\41"+
    "\1\0\1\41\2\0\23\41\1\171\5\41\1\171\15\41"+
    "\2\0\1\41\1\0\2\41\1\0\1\41\2\0\2\17"+
    "\1\330\3\17\1\42\1\41\32\17\1\331\4\41\2\0"+
    "\1\41\1\0\2\41\1\0\1\41\2\0\6\17\1\42"+
    "\1\41\4\17\1\332\26\17\4\41\2\0\1\41\1\0"+
    "\2\41\1\0\1\41\2\0\6\17\1\42\1\41\12\17"+
    "\1\333\20\17\2\41\1\334\1\41\2\0\1\41\1\0"+
    "\2\41\1\0\1\41\2\0\14\41\1\335\32\41\2\0"+
    "\1\41\1\0\2\41\1\0\1\41\2\0\6\17\1\42"+
    "\1\41\10\17\1\336\22\17\1\337\3\41\2\0\1\41"+
    "\1\0\2\41\1\0\1\41\2\0\6\17\1\42\1\41"+
    "\23\17\1\340\7\17\4\41\2\0\1\41\1\0\2\41"+
    "\1\0\1\41\2\0\6\17\1\42\1\41\1\341\32\17"+
    "\4\41\2\0\1\41\1\0\2\41\1\0\1\41\2\0"+
    "\2\17\1\170\3\17\1\42\1\41\33\17\4\41\2\0"+
    "\1\41\1\0\2\41\1\0\1\41\2\0\6\17\1\42"+
    "\1\41\24\17\1\342\6\17\4\41\2\0\1\41\1\0"+
    "\2\41\1\0\1\41\2\0\6\17\1\42\1\41\13\17"+
    "\1\343\17\17\4\41\2\0\1\41\1\0\2\41\1\0"+
    "\1\41\2\0\6\17\1\42\1\41\4\17\1\170\26\17"+
    "\4\41\2\0\1\41\1\0\2\41\1\0\1\41\2\0"+
    "\14\41\1\171\31\41\26\0\1\242\73\0\1\344\65\0"+
    "\1\345\52\0\1\346\70\0\1\242\53\0\1\242\44\0"+
    "\1\242\16\0\1\242\41\0\1\242\11\0\1\347\5\0"+
    "\1\350\34\0\1\351\7\0\1\352\22\0\1\352\27\0"+
    "\1\242\56\0\1\353\73\0\1\242\53\0\1\242\75\0"+
    "\1\354\53\0\1\355\56\0\1\242\6\0\1\356\50\0"+
    "\1\242\5\0\1\242\55\0\1\357\43\0\1\242\66\0"+
    "\1\142\75\0\1\360\53\0\1\242\16\0\1\41\2\0"+
    "\1\41\1\0\2\41\1\0\1\41\2\0\6\17\1\42"+
    "\1\41\1\172\32\17\4\41\2\0\1\41\1\0\2\41"+
    "\1\0\1\41\2\0\6\17\1\42\1\41\16\17\1\361"+
    "\14\17\4\41\2\0\1\41\1\0\2\41\1\0\1\41"+
    "\2\0\26\41\1\362\20\41\2\0\1\41\1\0\2\41"+
    "\1\0\1\41\2\0\6\17\1\42\1\41\22\17\1\363"+
    "\10\17\1\41\1\364\2\41\2\0\1\41\1\0\2\41"+
    "\1\0\1\41\2\0\6\17\1\42\1\41\3\17\1\365"+
    "\27\17\4\41\2\0\1\41\1\0\2\41\1\0\1\41"+
    "\2\0\6\17\1\42\1\41\30\17\1\366\2\17\4\41"+
    "\2\0\1\41\1\0\2\41\1\0\1\41\2\0\6\17"+
    "\1\42\1\41\21\17\1\367\11\17\4\41\2\0\1\41"+
    "\1\0\2\41\1\0\1\41\2\0\6\17\1\42\1\41"+
    "\16\17\1\331\14\17\4\41\2\0\1\41\1\0\2\41"+
    "\1\0\1\41\2\0\31\41\1\370\15\41\2\0\1\41"+
    "\1\0\2\41\1\0\1\41\2\0\6\17\1\42\1\41"+
    "\22\17\1\371\10\17\1\41\1\372\2\41\2\0\1\41"+
    "\1\0\2\41\1\0\1\41\2\0\32\41\1\372\11\41"+
    "\1\372\2\41\2\0\1\41\1\0\2\41\1\0\1\41"+
    "\2\0\6\17\1\42\1\41\12\17\1\373\20\17\2\41"+
    "\1\374\1\41\2\0\1\41\1\0\2\41\1\0\1\41"+
    "\2\0\6\17\1\42\1\41\6\17\1\170\4\17\1\170"+
    "\17\17\4\41\2\0\1\41\1\0\2\41\1\0\1\41"+
    "\2\0\6\17\1\42\1\41\22\17\1\375\10\17\1\41"+
    "\1\376\2\41\2\0\1\41\1\0\2\41\1\0\1\41"+
    "\2\0\6\17\1\42\1\41\32\17\1\312\4\41\2\0"+
    "\1\41\1\0\2\41\1\0\1\41\2\0\6\17\1\42"+
    "\1\41\27\17\1\377\3\17\4\41\2\0\1\41\1\0"+
    "\2\41\1\0\1\41\2\0\6\17\1\42\1\41\22\17"+
    "\1\u0100\10\17\1\41\1\u0101\2\41\2\0\1\41\1\0"+
    "\2\41\1\0\1\41\2\0\6\17\1\42\1\41\10\17"+
    "\1\u0102\22\17\1\u0103\3\41\2\0\1\41\1\0\2\41"+
    "\1\0\1\41\2\0\6\17\1\42\1\41\23\17\1\u0104"+
    "\7\17\4\41\2\0\1\41\1\0\2\41\1\0\1\41"+
    "\2\0\33\41\1\u0105\13\41\2\0\1\41\1\0\2\41"+
    "\1\0\1\41\2\0\6\17\1\42\1\41\22\17\1\u0106"+
    "\10\17\1\41\1\u0107\2\41\2\0\1\41\1\0\2\41"+
    "\1\0\1\41\2\0\6\17\1\42\1\41\15\17\1\u0108"+
    "\15\17\4\41\2\0\1\41\1\0\2\41\1\0\1\41"+
    "\2\0\6\17\1\42\1\41\13\17\1\177\17\17\4\41"+
    "\2\0\1\41\1\0\2\41\1\0\1\41\2\0\6\17"+
    "\1\42\1\41\2\17\1\u0109\30\17\4\41\2\0\1\41"+
    "\1\0\2\41\1\0\1\41\2\0\6\17\1\42\1\41"+
    "\2\17\1\u010a\30\17\4\41\2\0\1\41\1\0\2\41"+
    "\1\0\1\41\2\0\12\41\1\u010b\34\41\2\0\1\41"+
    "\1\0\2\41\1\0\1\41\2\0\6\17\1\42\1\41"+
    "\1\u010c\32\17\4\41\2\0\1\41\1\0\2\41\1\0"+
    "\1\41\2\0\6\17\1\42\1\41\12\17\1\u010d\20\17"+
    "\2\41\1\u010e\1\41\2\0\1\41\1\0\2\41\1\0"+
    "\1\41\2\0\10\41\1\u010f\36\41\2\0\1\41\1\0"+
    "\2\41\1\0\1\41\2\0\6\17\1\42\1\41\32\17"+
    "\1\331\4\41\2\0\1\41\1\0\2\41\1\0\1\41"+
    "\2\0\6\17\1\42\1\41\26\17\1\170\4\17\4\41"+
    "\2\0\1\41\1\0\2\41\1\0\1\41\2\0\6\17"+
    "\1\42\1\41\15\17\1\u0110\15\17\4\41\2\0\1\41"+
    "\1\0\2\41\1\0\1\41\2\0\6\17\1\42\1\41"+
    "\24\17\1\u0111\6\17\4\41\2\0\1\41\1\0\2\41"+
    "\1\0\1\41\2\0\34\41\1\u0112\12\41\2\0\1\41"+
    "\1\0\2\41\1\0\1\41\2\0\25\41\1\u0113\21\41"+
    "\2\0\1\41\1\0\2\41\1\0\1\41\2\0\6\17"+
    "\1\42\1\41\23\17\1\u0114\7\17\4\41\2\0\1\41"+
    "\1\0\2\41\1\0\1\41\2\0\33\41\1\u0115\13\41"+
    "\2\0\1\41\1\0\2\41\1\0\1\41\2\0\6\17"+
    "\1\42\1\41\10\17\1\u0116\22\17\1\u0117\3\41\2\0"+
    "\1\41\1\0\2\41\1\0\1\41\2\0\6\17\1\42"+
    "\1\41\21\17\1\u0118\11\17\4\41\2\0\1\41\1\0"+
    "\2\41\1\0\1\41\2\0\6\17\1\42\1\41\21\17"+
    "\1\u0119\11\17\4\41\2\0\1\41\1\0\2\41\1\0"+
    "\1\41\2\0\6\17\1\42\1\41\4\17\1\u011a\26\17"+
    "\3\41\23\0\1\243\76\0\1\u011b\64\0\1\u011c\11\0"+
    "\1\u011c\41\0\1\u011d\56\0\1\256\47\0\1\u011e\60\0"+
    "\1\u011f\61\0\1\u0120\55\0\1\u0121\72\0\1\u0122\22\0"+
    "\1\u0122\47\0\1\u0123\55\0\1\u0124\61\0\1\u0125\11\0"+
    "\1\u0125\1\0\1\41\2\0\1\41\1\0\2\41\1\0"+
    "\1\41\2\0\6\17\1\42\1\41\21\17\1\240\11\17"+
    "\4\41\2\0\1\41\1\0\2\41\1\0\1\41\2\0"+
    "\31\41\1\241\15\41\2\0\1\41\1\0\2\41\1\0"+
    "\1\41\2\0\6\17\1\42\1\41\23\17\1\u0126\7\17"+
    "\4\41\2\0\1\41\1\0\2\41\1\0\1\41\2\0"+
    "\33\41\1\u0127\13\41\2\0\1\41\1\0\2\41\1\0"+
    "\1\41\2\0\6\17\1\42\1\41\32\17\1\u0128\4\41"+
    "\2\0\1\41\1\0\2\41\1\0\1\41\2\0\6\17"+
    "\1\42\1\41\13\17\1\u0129\17\17\4\41\2\0\1\41"+
    "\1\0\2\41\1\0\1\41\2\0\6\17\1\42\1\41"+
    "\4\17\1\365\26\17\4\41\2\0\1\41\1\0\2\41"+
    "\1\0\1\41\2\0\14\41\1\u012a\32\41\2\0\1\41"+
    "\1\0\2\41\1\0\1\41\2\0\6\17\1\42\1\41"+
    "\7\17\1\170\23\17\4\41\2\0\1\41\1\0\2\41"+
    "\1\0\1\41\2\0\17\41\1\171\27\41\2\0\1\41"+
    "\1\0\2\41\1\0\1\41\2\0\6\17\1\42\1\41"+
    "\2\17\1\u012b\30\17\4\41\2\0\1\41\1\0\2\41"+
    "\1\0\1\41\2\0\12\41\1\u012c\34\41\2\0\1\41"+
    "\1\0\2\41\1\0\1\41\2\0\6\17\1\42\1\41"+
    "\23\17\1\u012d\7\17\4\41\2\0\1\41\1\0\2\41"+
    "\1\0\1\41\2\0\33\41\1\u012e\13\41\2\0\1\41"+
    "\1\0\2\41\1\0\1\41\2\0\1\17\2\170\3\17"+
    "\1\42\1\41\33\17\4\41\2\0\1\41\1\0\2\41"+
    "\1\0\1\41\2\0\6\17\1\42\1\41\23\17\1\u012f"+
    "\7\17\4\41\2\0\1\41\1\0\2\41\1\0\1\41"+
    "\2\0\33\41\1\u0130\13\41\2\0\1\41\1\0\2\41"+
    "\1\0\1\41\2\0\6\17\1\42\1\41\4\17\1\u0131"+
    "\26\17\4\41\2\0\1\41\1\0\2\41\1\0\1\41"+
    "\2\0\14\41\1\u0132\32\41\2\0\1\41\1\0\2\41"+
    "\1\0\1\41\2\0\6\17\1\42\1\41\1\u0133\32\17"+
    "\4\41\2\0\1\41\1\0\2\41\1\0\1\41\2\0"+
    "\10\41\1\u0134\36\41\2\0\1\41\1\0\2\41\1\0"+
    "\1\41\2\0\6\17\1\42\1\41\23\17\1\u0135\7\17"+
    "\4\41\2\0\1\41\1\0\2\41\1\0\1\41\2\0"+
    "\33\41\1\u0136\13\41\2\0\1\41\1\0\2\41\1\0"+
    "\1\41\2\0\6\17\1\42\1\41\15\17\1\u0137\15\17"+
    "\4\41\2\0\1\41\1\0\2\41\1\0\1\41\2\0"+
    "\6\17\1\42\1\41\14\17\1\u0138\16\17\4\41\2\0"+
    "\1\41\1\0\2\41\1\0\1\41\2\0\6\17\1\42"+
    "\1\41\14\17\1\u0139\16\17\4\41\2\0\1\41\1\0"+
    "\2\41\1\0\1\41\2\0\24\41\1\u013a\22\41\2\0"+
    "\1\41\1\0\2\41\1\0\1\41\2\0\6\17\1\42"+
    "\1\41\15\17\1\u013b\15\17\4\41\2\0\1\41\1\0"+
    "\2\41\1\0\1\41\2\0\6\17\1\42\1\41\4\17"+
    "\1\u013c\26\17\4\41\2\0\1\41\1\0\2\41\1\0"+
    "\1\41\2\0\14\41\1\u013d\32\41\2\0\1\41\1\0"+
    "\2\41\1\0\1\41\2\0\25\41\1\u013e\21\41\2\0"+
    "\1\41\1\0\2\41\1\0\1\41\2\0\6\17\1\42"+
    "\1\41\24\17\1\u013f\6\17\4\41\2\0\1\41\1\0"+
    "\2\41\1\0\1\41\2\0\6\17\1\42\1\41\17\17"+
    "\1\u011a\13\17\4\41\2\0\1\41\1\0\2\41\1\0"+
    "\1\41\2\0\27\41\1\u0140\17\41\2\0\1\41\1\0"+
    "\2\41\1\0\1\41\2\0\34\41\1\u0141\12\41\2\0"+
    "\1\41\1\0\2\41\1\0\1\41\2\0\6\17\1\42"+
    "\1\41\16\17\1\u0142\14\17\4\41\2\0\1\41\1\0"+
    "\2\41\1\0\1\41\2\0\26\41\1\u0143\20\41\2\0"+
    "\1\41\1\0\2\41\1\0\1\41\2\0\6\17\1\42"+
    "\1\41\1\u0144\32\17\4\41\2\0\1\41\1\0\2\41"+
    "\1\0\1\41\2\0\10\41\1\u0145\36\41\2\0\1\41"+
    "\1\0\2\41\1\0\1\41\2\0\6\17\1\42\1\41"+
    "\21\17\1\u0146\11\17\4\41\2\0\1\41\1\0\2\41"+
    "\1\0\1\41\2\0\6\17\1\42\1\41\15\17\1\170"+
    "\15\17\4\41\2\0\1\41\1\0\2\41\1\0\1\41"+
    "\2\0\6\17\1\42\1\41\22\17\1\u0147\10\17\1\41"+
    "\1\u0148\1\41\44\0\1\u0149\62\0\1\u014a\52\0\1\u014b"+
    "\57\0\1\u014c\60\0\1\u014d\76\0\1\u014e\43\0\1\u014f"+
    "\47\0\1\u0150\75\0\1\u0151\43\0\1\u0120\63\0\1\242"+
    "\26\0\1\41\2\0\1\41\1\0\2\41\1\0\1\41"+
    "\2\0\6\17\1\42\1\41\32\17\1\u0108\4\41\2\0"+
    "\1\41\1\0\2\41\1\0\1\41\2\0\42\41\1\u0152"+
    "\4\41\2\0\1\41\1\0\2\41\1\0\1\41\2\0"+
    "\4\170\2\17\1\42\1\41\33\17\4\41\2\0\1\41"+
    "\1\0\2\41\1\0\1\41\2\0\6\17\1\42\1\41"+
    "\4\17\1\u0153\26\17\4\41\2\0\1\41\1\0\2\41"+
    "\1\0\1\41\2\0\42\41\1\u0154\4\41\2\0\1\41"+
    "\1\0\2\41\1\0\1\41\2\0\6\17\1\42\1\41"+
    "\1\u0155\32\17\4\41\2\0\1\41\1\0\2\41\1\0"+
    "\1\41\2\0\10\41\1\u0156\36\41\2\0\1\41\1\0"+
    "\2\41\1\0\1\41\2\0\6\17\1\42\1\41\32\17"+
    "\1\u0157\4\41\2\0\1\41\1\0\2\41\1\0\1\41"+
    "\2\0\42\41\1\u0158\4\41\2\0\1\41\1\0\2\41"+
    "\1\0\1\41\2\0\6\17\1\42\1\41\32\17\1\u0159"+
    "\4\41\2\0\1\41\1\0\2\41\1\0\1\41\2\0"+
    "\42\41\1\u015a\4\41\2\0\1\41\1\0\2\41\1\0"+
    "\1\41\2\0\6\17\1\42\1\41\13\17\1\172\17\17"+
    "\4\41\2\0\1\41\1\0\2\41\1\0\1\41\2\0"+
    "\23\41\1\u015b\23\41\2\0\1\41\1\0\2\41\1\0"+
    "\1\41\2\0\6\17\1\42\1\41\23\17\1\u015c\7\17"+
    "\4\41\2\0\1\41\1\0\2\41\1\0\1\41\2\0"+
    "\33\41\1\u015d\13\41\2\0\1\41\1\0\2\41\1\0"+
    "\1\41\2\0\6\17\1\42\1\41\32\17\1\u015e\4\41"+
    "\2\0\1\41\1\0\2\41\1\0\1\41\2\0\42\41"+
    "\1\u015f\4\41\2\0\1\41\1\0\2\41\1\0\1\41"+
    "\2\0\6\17\1\42\1\41\24\17\1\321\6\17\4\41"+
    "\2\0\1\41\1\0\2\41\1\0\1\41\2\0\6\17"+
    "\1\42\1\41\17\17\1\u0160\13\17\4\41\2\0\1\41"+
    "\1\0\2\41\1\0\1\41\2\0\6\17\1\42\1\41"+
    "\17\17\1\u0161\13\17\4\41\2\0\1\41\1\0\2\41"+
    "\1\0\1\41\2\0\27\41\1\u0162\17\41\2\0\1\41"+
    "\1\0\2\41\1\0\1\41\2\0\6\17\1\42\1\41"+
    "\2\17\1\u0163\30\17\4\41\2\0\1\41\1\0\2\41"+
    "\1\0\1\41\2\0\6\17\1\42\1\41\3\17\1\u0164"+
    "\4\17\1\u0165\11\17\1\u0166\2\17\1\u0167\5\17\1\u0168"+
    "\1\u0169\2\41\2\0\1\41\1\0\2\41\1\0\1\41"+
    "\2\0\13\41\1\u016a\4\41\1\u0168\11\41\1\u0169\2\41"+
    "\1\u016b\5\41\1\u0168\1\u0169\2\41\2\0\1\41\1\0"+
    "\2\41\1\0\1\41\2\0\12\41\1\u016c\34\41\2\0"+
    "\1\41\1\0\2\41\1\0\1\41\2\0\6\17\1\42"+
    "\1\41\14\17\1\u016d\16\17\4\41\2\0\1\41\1\0"+
    "\2\41\1\0\1\41\2\0\32\41\1\u0148\11\41\1\u0148"+
    "\2\41\2\0\1\41\1\0\2\41\1\0\1\41\2\0"+
    "\24\41\1\u016e\22\41\2\0\1\41\1\0\2\41\1\0"+
    "\1\41\2\0\6\17\1\42\1\41\21\17\1\u016f\11\17"+
    "\4\41\2\0\1\41\1\0\2\41\1\0\1\41\2\0"+
    "\31\41\1\u0170\15\41\2\0\1\41\1\0\2\41\1\0"+
    "\1\41\2\0\6\17\1\42\1\41\15\17\1\46\15\17"+
    "\4\41\2\0\1\41\1\0\2\41\1\0\1\41\2\0"+
    "\25\41\1\u0171\21\41\2\0\1\41\1\0\2\41\1\0"+
    "\1\41\2\0\6\17\1\42\1\41\1\u0172\32\17\4\41"+
    "\2\0\1\41\1\0\2\41\1\0\1\41\2\0\6\17"+
    "\1\42\1\41\26\17\1\u0173\4\17\4\41\2\0\1\41"+
    "\1\0\2\41\1\0\1\41\2\0\36\41\1\u0174\7\41"+
    "\27\0\1\242\106\0\1\u0175\52\0\1\350\53\0\1\u0176"+
    "\60\0\1\u0177\31\0\4\242\67\0\1\u0178\61\0\1\u0179"+
    "\4\0\1\u017a\11\0\1\u017b\2\0\1\u017c\5\0\1\u017a"+
    "\1\u017b\41\0\1\242\20\0\1\41\2\0\1\41\1\0"+
    "\2\41\1\0\1\41\2\0\25\41\1\u017d\21\41\2\0"+
    "\1\41\1\0\2\41\1\0\1\41\2\0\6\17\1\42"+
    "\1\41\15\17\1\u017e\15\17\4\41\2\0\1\41\1\0"+
    "\2\41\1\0\1\41\2\0\4\171\43\41\2\0\1\41"+
    "\1\0\2\41\1\0\1\41\2\0\6\17\1\42\1\41"+
    "\22\17\1\u017f\10\17\1\41\1\u0180\2\41\2\0\1\41"+
    "\1\0\2\41\1\0\1\41\2\0\32\41\1\u0180\11\41"+
    "\1\u0180\2\41\2\0\1\41\1\0\2\41\1\0\1\41"+
    "\2\0\2\170\4\17\1\42\1\41\33\17\4\41\2\0"+
    "\1\41\1\0\2\41\1\0\1\41\2\0\2\171\45\41"+
    "\2\0\1\41\1\0\2\41\1\0\1\41\2\0\3\170"+
    "\3\17\1\42\1\41\33\17\4\41\2\0\1\41\1\0"+
    "\2\41\1\0\1\41\2\0\3\171\44\41\2\0\1\41"+
    "\1\0\2\41\1\0\1\41\2\0\13\41\1\171\33\41"+
    "\2\0\1\41\1\0\2\41\1\0\1\41\2\0\6\17"+
    "\1\42\1\41\10\17\1\215\22\17\1\224\3\41\2\0"+
    "\1\41\1\0\2\41\1\0\1\41\2\0\20\41\1\224"+
    "\22\41\1\224\3\41\2\0\1\41\1\0\2\41\1\0"+
    "\1\41\2\0\5\170\1\17\1\42\1\41\14\17\1\u0181"+
    "\16\17\4\41\2\0\1\41\1\0\2\41\1\0\1\41"+
    "\2\0\5\171\17\41\1\u0182\22\41\2\0\1\41\1\0"+
    "\2\41\1\0\1\41\2\0\6\17\1\42\1\41\4\17"+
    "\1\211\10\17\1\240\15\17\4\41\2\0\1\41\1\0"+
    "\2\41\1\0\1\41\2\0\6\17\1\42\1\41\4\17"+
    "\1\211\1\17\1\212\4\17\1\212\1\17\1\240\15\17"+
    "\4\41\2\0\1\41\1\0\2\41\1\0\1\41\2\0"+
    "\14\41\1\u0183\1\41\1\u0184\4\41\1\u0184\1\41\1\241"+
    "\21\41\2\0\1\41\1\0\2\41\1\0\1\41\2\0"+
    "\6\17\1\42\1\41\4\17\1\u0185\26\17\4\41\2\0"+
    "\1\41\1\0\2\41\1\0\1\41\2\0\6\17\1\42"+
    "\1\41\30\17\1\u0186\2\17\4\41\2\0\1\41\1\0"+
    "\2\41\1\0\1\41\2\0\6\17\1\42\1\41\15\17"+
    "\1\u0187\15\17\4\41\2\0\1\41\1\0\2\41\1\0"+
    "\1\41\2\0\6\17\1\42\1\41\17\17\1\u0188\3\17"+
    "\1\u0104\7\17\4\41\2\0\1\41\1\0\2\41\1\0"+
    "\1\41\2\0\6\17\1\42\1\41\10\17\1\u0189\22\17"+
    "\1\u018a\3\41\2\0\1\41\1\0\2\41\1\0\1\41"+
    "\2\0\25\41\1\u018b\21\41\2\0\1\41\1\0\2\41"+
    "\1\0\1\41\2\0\27\41\1\u018c\3\41\1\u0105\13\41"+
    "\2\0\1\41\1\0\2\41\1\0\1\41\2\0\40\41"+
    "\1\u018d\6\41\2\0\1\41\1\0\2\41\1\0\1\41"+
    "\2\0\20\41\1\u018a\22\41\1\u018a\3\41\2\0\1\41"+
    "\1\0\2\41\1\0\1\41\2\0\14\41\1\u018e\32\41"+
    "\2\0\1\41\1\0\2\41\1\0\1\41\2\0\6\17"+
    "\1\42\1\41\1\17\1\u018f\31\17\4\41\2\0\1\41"+
    "\1\0\2\41\1\0\1\41\2\0\11\41\1\u0190\35\41"+
    "\2\0\1\41\1\0\2\41\1\0\1\41\2\0\6\17"+
    "\1\42\1\41\4\17\1\u0191\26\17\4\41\2\0\1\41"+
    "\1\0\2\41\1\0\1\41\2\0\14\41\1\u0192\32\41"+
    "\2\0\1\41\1\0\2\41\1\0\1\41\2\0\14\41"+
    "\1\u0193\32\41\2\0\1\41\1\0\2\41\1\0\1\41"+
    "\2\0\6\17\1\42\1\41\30\17\1\170\2\17\4\41"+
    "\2\0\1\41\1\0\2\41\1\0\1\41\2\0\6\17"+
    "\1\42\1\41\10\17\1\u0194\22\17\1\u0195\3\41\2\0"+
    "\1\41\1\0\2\41\1\0\1\41\2\0\20\41\1\u0195"+
    "\22\41\1\u0195\2\41\13\0\5\242\17\0\1\u0196\50\0"+
    "\1\250\10\0\1\u0149\47\0\1\250\1\0\1\251\4\0"+
    "\1\251\1\0\1\u0149\47\0\1\u0197\104\0\1\u0198\45\0"+
    "\1\u0199\62\0\1\u019a\3\0\1\u019b\45\0\1\u019c\22\0"+
    "\1\u019c\2\0\1\41\2\0\1\41\1\0\2\41\1\0"+
    "\1\41\2\0\34\41\1\u019d\12\41\2\0\1\41\1\0"+
    "\2\41\1\0\1\41\2\0\6\17\1\42\1\41\6\17"+
    "\1\u019e\24\17\4\41\2\0\1\41\1\0\2\41\1\0"+
    "\1\41\2\0\6\17\1\42\1\41\23\17\1\170\7\17"+
    "\4\41\2\0\1\41\1\0\2\41\1\0\1\41\2\0"+
    "\33\41\1\171\13\41\2\0\1\41\1\0\2\41\1\0"+
    "\1\41\2\0\1\17\1\170\4\17\1\42\1\41\33\17"+
    "\4\41\2\0\1\41\1\0\2\41\1\0\1\41\2\0"+
    "\1\41\1\171\45\41\2\0\1\41\1\0\2\41\1\0"+
    "\1\41\2\0\30\41\1\171\16\41\2\0\1\41\1\0"+
    "\2\41\1\0\1\41\2\0\14\41\1\171\16\41\1\171"+
    "\13\41\2\0\1\41\1\0\2\41\1\0\1\41\2\0"+
    "\6\17\1\42\1\41\16\17\1\u019f\14\17\4\41\2\0"+
    "\1\41\1\0\2\41\1\0\1\41\2\0\6\17\1\42"+
    "\1\41\15\17\1\u01a0\15\17\4\41\2\0\1\41\1\0"+
    "\2\41\1\0\1\41\2\0\6\17\1\42\1\41\23\17"+
    "\1\u01a1\7\17\4\41\2\0\1\41\1\0\2\41\1\0"+
    "\1\41\2\0\6\17\1\42\1\41\4\17\1\u01a2\26\17"+
    "\4\41\2\0\1\41\1\0\2\41\1\0\1\41\2\0"+
    "\6\17\1\42\1\41\21\17\1\u01a3\11\17\4\41\2\0"+
    "\1\41\1\0\2\41\1\0\1\41\2\0\31\41\1\u01a4"+
    "\15\41\2\0\1\41\1\0\2\41\1\0\1\41\2\0"+
    "\33\41\1\u01a5\13\41\2\0\1\41\1\0\2\41\1\0"+
    "\1\41\2\0\14\41\1\u01a6\32\41\2\0\1\41\1\0"+
    "\2\41\1\0\1\41\2\0\25\41\1\u01a7\21\41\2\0"+
    "\1\41\1\0\2\41\1\0\1\41\2\0\26\41\1\u01a8"+
    "\20\41\2\0\1\41\1\0\2\41\1\0\1\41\2\0"+
    "\6\17\1\42\1\41\4\17\1\102\26\17\4\41\2\0"+
    "\1\41\1\0\2\41\1\0\1\41\2\0\14\41\1\110"+
    "\32\41\2\0\1\41\1\0\2\41\1\0\1\41\2\0"+
    "\6\17\1\42\1\41\15\17\1\u01a9\11\17\1\u01aa\3\17"+
    "\4\41\2\0\1\41\1\0\2\41\1\0\1\41\2\0"+
    "\25\41\1\u01ab\11\41\1\u01ac\7\41\2\0\1\41\1\0"+
    "\2\41\1\0\1\41\2\0\36\41\1\u01ad\10\41\2\0"+
    "\1\41\1\0\2\41\1\0\1\41\2\0\6\17\1\42"+
    "\1\41\23\17\1\u01ae\7\17\4\41\2\0\1\41\1\0"+
    "\2\41\1\0\1\41\2\0\33\41\1\u01af\12\41\14\0"+
    "\1\242\105\0\1\u01b0\57\0\1\u01b1\66\0\1\u01b2\41\0"+
    "\1\u01b3\54\0\1\u01b4\101\0\1\u01b5\14\0\1\41\2\0"+
    "\1\41\1\0\2\41\1\0\1\41\2\0\23\41\1\u01b6"+
    "\23\41\2\0\1\41\1\0\2\41\1\0\1\41\2\0"+
    "\6\17\1\42\1\41\23\17\1\371\7\17\4\41\2\0"+
    "\1\41\1\0\2\41\1\0\1\41\2\0\6\17\1\42"+
    "\1\41\5\17\1\170\25\17\4\41\2\0\1\41\1\0"+
    "\2\41\1\0\1\41\2\0\6\17\1\42\1\41\1\u01b7"+
    "\32\17\4\41\2\0\1\41\1\0\2\41\1\0\1\41"+
    "\2\0\6\17\1\42\1\41\4\17\1\u01b8\26\17\4\41"+
    "\2\0\1\41\1\0\2\41\1\0\1\41\2\0\6\17"+
    "\1\42\1\41\2\17\1\u01b9\30\17\4\41\2\0\1\41"+
    "\1\0\2\41\1\0\1\41\2\0\6\17\1\42\1\41"+
    "\23\17\1\u01ba\7\17\4\41\2\0\1\41\1\0\2\41"+
    "\1\0\1\41\2\0\33\41\1\u01bb\13\41\2\0\1\41"+
    "\1\0\2\41\1\0\1\41\2\0\14\41\1\u01bc\32\41"+
    "\2\0\1\41\1\0\2\41\1\0\1\41\2\0\12\41"+
    "\1\u01bd\34\41\2\0\1\41\1\0\2\41\1\0\1\41"+
    "\2\0\10\41\1\u01be\36\41\2\0\1\41\1\0\2\41"+
    "\1\0\1\41\2\0\15\41\1\171\31\41\2\0\1\41"+
    "\1\0\2\41\1\0\1\41\2\0\6\17\1\42\1\41"+
    "\23\17\1\u018f\7\17\4\41\2\0\1\41\1\0\2\41"+
    "\1\0\1\41\2\0\6\17\1\42\1\41\10\17\1\u017f"+
    "\22\17\1\u0180\3\41\2\0\1\41\1\0\2\41\1\0"+
    "\1\41\2\0\33\41\1\u0190\13\41\2\0\1\41\1\0"+
    "\2\41\1\0\1\41\2\0\20\41\1\u0180\22\41\1\u0180"+
    "\3\41\2\0\1\41\1\0\2\41\1\0\1\41\2\0"+
    "\10\41\1\u01bf\36\41\2\0\1\41\1\0\2\41\1\0"+
    "\1\41\2\0\6\17\1\42\1\41\2\17\1\371\30\17"+
    "\4\41\2\0\1\41\1\0\2\41\1\0\1\41\2\0"+
    "\12\41\1\372\33\41\30\0\1\242\53\0\1\u01c0\64\0"+
    "\1\u01c1\56\0\1\u01c2\101\0\1\u01c3\60\0\1\u01c4\12\0"+
    "\1\41\2\0\1\41\1\0\2\41\1\0\1\41\2\0"+
    "\23\41\1\171\23\41\2\0\1\41\1\0\2\41\1\0"+
    "\1\41\2\0\6\17\1\42\1\41\14\17\1\u015c\16\17"+
    "\4\41\2\0\1\41\1\0\2\41\1\0\1\41\2\0"+
    "\6\17\1\42\1\41\21\17\1\u01c5\11\17\4\41\2\0"+
    "\1\41\1\0\2\41\1\0\1\41\2\0\6\17\1\42"+
    "\1\41\10\17\1\u01c6\22\17\1\u01c7\3\41\2\0\1\41"+
    "\1\0\2\41\1\0\1\41\2\0\6\17\1\42\1\41"+
    "\24\17\1\u01c6\6\17\4\41\2\0\1\41\1\0\2\41"+
    "\1\0\1\41\2\0\34\41\1\u01c7\12\41\2\0\1\41"+
    "\1\0\2\41\1\0\1\41\2\0\31\41\1\u01c8\15\41"+
    "\2\0\1\41\1\0\2\41\1\0\1\41\2\0\20\41"+
    "\1\u01c7\22\41\1\u01c7\3\41\2\0\1\41\1\0\2\41"+
    "\1\0\1\41\2\0\24\41\1\u015d\22\41\2\0\1\41"+
    "\1\0\2\41\1\0\1\41\2\0\31\41\1\u01c9\14\41"+
    "\37\0\1\u01c3\65\0\1\u01ca\47\0\1\u01cb\22\0\1\u01cb"+
    "\35\0\1\254\22\0\1\254\51\0\1\u01cb\11\0\1\41"+
    "\2\0\1\41\1\0\2\41\1\0\1\41\2\0\6\17"+
    "\1\42\1\41\5\17\1\u01cc\25\17\4\41\2\0\1\41"+
    "\1\0\2\41\1\0\1\41\2\0\6\17\1\42\1\41"+
    "\1\177\32\17\4\41\2\0\1\41\1\0\2\41\1\0"+
    "\1\41\2\0\10\41\1\u01b6\36\41\2\0\1\41\1\0"+
    "\2\41\1\0\1\41\2\0\15\41\1\u01cd\31\41\2\0"+
    "\1\41\1\0\2\41\1\0\1\41\2\0\31\41\1\u01ce"+
    "\14\41\30\0\1\u01cf\53\0\1\256\35\0\1\41\2\0"+
    "\1\41\1\0\2\41\1\0\1\41\2\0\6\17\1\42"+
    "\1\41\1\u01d0\32\17\4\41\2\0\1\41\1\0\2\41"+
    "\1\0\1\41\2\0\10\41\1\u01d1\36\41\2\0\1\41"+
    "\1\0\2\41\1\0\1\41\2\0\10\41\1\u01d2\35\41"+
    "\23\0\1\u01d3\35\0\1\41\2\0\1\41\1\0\2\41"+
    "\1\0\1\41\2\0\6\17\1\42\1\41\2\17\1\240"+
    "\30\17\4\41\2\0\1\41\1\0\2\41\1\0\1\41"+
    "\2\0\12\41\1\241\34\41\2\0\1\41\1\0\2\41"+
    "\1\0\1\41\2\0\40\41\1\171\5\41\25\0\1\u0149"+
    "\33\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[22393];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\1\1\2\11\30\1\2\11\70\1\21\0"+
    "\70\1\1\11\26\0\53\1\15\0\52\1\5\0\1\1"+
    "\5\0\43\1\11\0\43\1\10\0\31\1\7\0\23\1"+
    "\6\0\12\1\5\0\5\1\2\0\3\1\1\0\3\1"+
    "\1\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[467];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */


	/**
	 * Constructor.  We must have this here as JFLex does not generate a
	 * no parameter constructor.
	 */
	public JavaBytecodeTokenMaker() {
		super();
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int tokenType) {
		addToken(zzStartRead, zzMarkedPos-1, tokenType);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param array The character array.
	 * @param start The starting offset in the array.
	 * @param end The ending offset in the array.
	 * @param tokenType The token's type.
	 * @param startOffset The offset in the document at which this token
	 *                    occurs.
	 */
	@Override
	public void addToken(char[] array, int start, int end, int tokenType, int startOffset) {
		super.addToken(array, start,end, tokenType, startOffset);
		zzStartRead = zzMarkedPos;
	}


	@Override
	public String[] getLineCommentStartAndEnd(int languageIndex) {
		return new String[] { ";", null };
	}


	/**
	 * Returns the first token in the linked list of tokens generated
	 * from <code>text</code>.  This method must be implemented by
	 * subclasses so they can correctly implement syntax highlighting.
	 *
	 * @param text The text from which to get tokens.
	 * @param initialTokenType The token type we should start with.
	 * @param startOffset The offset into the document at which
	 *                    <code>text</code> starts.
	 * @return The first <code>Token</code> in a linked list representing
	 *         the syntax highlighted text.
	 */
	public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

		resetTokenList();
		this.offsetShift = -text.offset + startOffset;

		// Start off in the proper state.
		int state = YYINITIAL;

		s = text;
		try {
			yyreset(zzReader);
			yybegin(state);
			return yylex();
		} catch (IOException ioe) {
			ioe.printStackTrace();
			return new TokenImpl();
		}

	}


	/**
	 * Refills the input buffer.
	 *
	 * @return      <code>true</code> if EOF was reached, otherwise
	 *              <code>false</code>.
	 */
	private boolean zzRefill() {
		return zzCurrentPos>=s.offset+s.count;
	}


	/**
	 * Resets the scanner to read from a new input stream.
	 * Does not close the old reader.
	 *
	 * All internal variables are reset, the old input stream
	 * <b>cannot</b> be reused (internal buffer is discarded and lost).
	 * Lexical state is set to <tt>YY_INITIAL</tt>.
	 *
	 * @param reader   the new input stream
	 */
	public final void yyreset(Reader reader) {
		// 's' has been updated.
		zzBuffer = s.array;
		/*
		 * We replaced the line below with the two below it because zzRefill
		 * no longer "refills" the buffer (since the way we do it, it's always
		 * "full" the first time through, since it points to the segment's
		 * array).  So, we assign zzEndRead here.
		 */
		//zzStartRead = zzEndRead = s.offset;
		zzStartRead = s.offset;
		zzEndRead = zzStartRead + s.count - 1;
		zzCurrentPos = zzMarkedPos = s.offset;
		zzLexicalState = YYINITIAL;
		zzReader = reader;
		zzAtBOL  = true;
		zzAtEOF  = false;
	}




  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public JavaBytecodeTokenMaker(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }




  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL[zzMarkedPosL-1]) {
        case '\n':
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':  // fall through
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            switch (zzLexicalState) {
            case YYINITIAL: {
              addNullToken(); return firstToken;
            }  // fall though
            case 468: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { addToken(Token.IDENTIFIER);
            }
          // fall through
          case 14: break;
          case 2:
            { addToken(Token.WHITESPACE);
            }
          // fall through
          case 15: break;
          case 3:
            { addNullToken(); return firstToken;
            }
          // fall through
          case 16: break;
          case 4:
            { addToken(Token.OPERATOR);
            }
          // fall through
          case 17: break;
          case 5:
            { addToken(Token.ERROR_STRING_DOUBLE); addNullToken(); return firstToken;
            }
          // fall through
          case 18: break;
          case 6:
            { addToken(Token.ERROR_CHAR); /*addNullToken(); return firstToken;*/
            }
          // fall through
          case 19: break;
          case 7:
            { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
            }
          // fall through
          case 20: break;
          case 8:
            { addToken(Token.COMMENT_EOL); addNullToken(); return firstToken;
            }
          // fall through
          case 21: break;
          case 9:
            { addToken(Token.FUNCTION);
            }
          // fall through
          case 22: break;
          case 10:
            { addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
            }
          // fall through
          case 23: break;
          case 11:
            { addToken(Token.LITERAL_CHAR);
            }
          // fall through
          case 24: break;
          case 12:
            { addToken(Token.PREPROCESSOR);
            }
          // fall through
          case 25: break;
          case 13:
            { addToken(TokenTypes.RESERVED_WORD);
            }
          // fall through
          case 26: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
