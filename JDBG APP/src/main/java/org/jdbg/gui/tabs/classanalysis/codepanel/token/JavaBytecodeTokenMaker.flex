/*
 * 12/06/2004
 *
 * JavaBytecodeTokenMaker.java - An object that can take a chunk of text and
 * return a linked list of tokens representing X86 assembler.
 *
 * This library is distributed under a modified BSD license.  See the included
 * LICENSE file for details.
 */
package org.jdbg.gui.tabs.classanalysis.codepanel.token;

import java.io.*;
import javax.swing.text.Segment;

import org.fife.ui.rsyntaxtextarea.*;


/**
 * This class takes plain text and returns tokens representing x86
 * assembler.<p>
 *
 * This implementation was created using
 * <a href="https://www.jflex.de/">JFlex</a> 1.4.1; however, the generated file
 * was modified for performance.  Memory allocation needs to be almost
 * completely removed to be competitive with the handwritten lexers (subclasses
 * of <code>AbstractTokenMaker</code>), so this class has been modified so that
 * Strings are never allocated (via yytext()), and the scanner never has to
 * worry about refilling its buffer (needlessly copying chars around).
 * We can achieve this because RText always scans exactly 1 line of tokens at a
 * time, and hands the scanner this line as an array of characters (a Segment
 * really).  Since tokens contain pointers to char arrays instead of Strings
 * holding their contents, there is no need for allocating new memory for
 * Strings.<p>
 *
 * The actual algorithm generated for scanning has, of course, not been
 * modified.<p>
 *
 * If you wish to regenerate this file yourself, keep in mind the following:
 * <ul>
 *   <li>The generated <code>JavaBytecodeTokenMaker.java</code> file will contain two
 *       definitions of both <code>zzRefill</code> and <code>yyreset</code>.
 *       You should hand-delete the second of each definition (the ones
 *       generated by the lexer), as these generated methods modify the input
 *       buffer, which we'll never have to do.</li>
 *   <li>You should also change the declaration/definition of zzBuffer to NOT
 *       be initialized.  This is a needless memory allocation for us since we
 *       will be pointing the array somewhere else anyway.</li>
 *   <li>You should NOT call <code>yylex()</code> on the generated scanner
 *       directly; rather, you should use <code>getTokenList</code> as you would
 *       with any other <code>TokenMaker</code> instance.</li>
 * </ul>
 *
 * @author Robert Futrell
 * @version 0.2
 *
 */
%%

%public
%class JavaBytecodeTokenMaker
%extends AbstractJFlexTokenMaker
%unicode
%ignorecase
%type org.fife.ui.rsyntaxtextarea.Token


%{


	/**
	 * Constructor.  We must have this here as JFLex does not generate a
	 * no parameter constructor.
	 */
	public JavaBytecodeTokenMaker() {
		super();
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int tokenType) {
		addToken(zzStartRead, zzMarkedPos-1, tokenType);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param array The character array.
	 * @param start The starting offset in the array.
	 * @param end The ending offset in the array.
	 * @param tokenType The token's type.
	 * @param startOffset The offset in the document at which this token
	 *                    occurs.
	 */
	@Override
	public void addToken(char[] array, int start, int end, int tokenType, int startOffset) {
		super.addToken(array, start,end, tokenType, startOffset);
		zzStartRead = zzMarkedPos;
	}


	@Override
	public String[] getLineCommentStartAndEnd(int languageIndex) {
		return new String[] { ";", null };
	}


	/**
	 * Returns the first token in the linked list of tokens generated
	 * from <code>text</code>.  This method must be implemented by
	 * subclasses so they can correctly implement syntax highlighting.
	 *
	 * @param text The text from which to get tokens.
	 * @param initialTokenType The token type we should start with.
	 * @param startOffset The offset into the document at which
	 *                    <code>text</code> starts.
	 * @return The first <code>Token</code> in a linked list representing
	 *         the syntax highlighted text.
	 */
	public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

		resetTokenList();
		this.offsetShift = -text.offset + startOffset;

		// Start off in the proper state.
		int state = YYINITIAL;

		s = text;
		try {
			yyreset(zzReader);
			yybegin(state);
			return yylex();
		} catch (IOException ioe) {
			ioe.printStackTrace();
			return new TokenImpl();
		}

	}


	/**
	 * Refills the input buffer.
	 *
	 * @return      <code>true</code> if EOF was reached, otherwise
	 *              <code>false</code>.
	 */
	private boolean zzRefill() {
		return zzCurrentPos>=s.offset+s.count;
	}


	/**
	 * Resets the scanner to read from a new input stream.
	 * Does not close the old reader.
	 *
	 * All internal variables are reset, the old input stream
	 * <b>cannot</b> be reused (internal buffer is discarded and lost).
	 * Lexical state is set to <tt>YY_INITIAL</tt>.
	 *
	 * @param reader   the new input stream
	 */
	public final void yyreset(Reader reader) {
		// 's' has been updated.
		zzBuffer = s.array;
		/*
		 * We replaced the line below with the two below it because zzRefill
		 * no longer "refills" the buffer (since the way we do it, it's always
		 * "full" the first time through, since it points to the segment's
		 * array).  So, we assign zzEndRead here.
		 */
		//zzStartRead = zzEndRead = s.offset;
		zzStartRead = s.offset;
		zzEndRead = zzStartRead + s.count - 1;
		zzCurrentPos = zzMarkedPos = zzPushbackPos = s.offset;
		zzLexicalState = YYINITIAL;
		zzReader = reader;
		zzAtBOL  = true;
		zzAtEOF  = false;
	}


%}

Letter				= ([A-Za-z_])
Digit				= ([0-9])
Number				= ({Digit}+)

Identifier			= (({Letter}|{Digit})[^ \t\f\n\,\.\+\-\*\/\%\[\]]+)

UnclosedStringLiteral	= ([\"][^\"]*)
StringLiteral			= ({UnclosedStringLiteral}[\"])
UnclosedCharLiteral		= ([\'][^\']*)
CharLiteral			= ({UnclosedCharLiteral}[\'])

CommentBegin			= ([;])

LineTerminator			= (\n)
WhiteSpace			= ([ \t\f])

Label				= (({Letter}|{Digit})+[\:])

Operator				= ("+"|"-"|"*"|"/"|"%"|"^"|"|"|"&"|"~"|"!"|"="|"<"|">")

%%

<YYINITIAL> {

/* Keywords */
    "LINENUMBER" |
    "NOP" |
    "ACONST_NULL" |
    "ICONST_M1" |
    "ICONST_0" |
    "ICONST_1" |
    "ICONST_2" |
    "ICONST_3" |
    "ICONST_4" |
    "ICONST_5" |
    "LCONST_0" |
    "LCONST_1" |
    "FCONST_0" |
    "FCONST_1" |
    "FCONST_2" |
    "DCONST_0" |
    "DCONST_1" |
    "BIPUSH" |
    "SIPUSH" |
    "LDC" |
    "LDC_W" |
    "LDC2_W" |
    "ILOAD" |
    "LLOAD" |
    "FLOAD" |
    "DLOAD" |
    "ALOAD" |
    "ILOAD_0" |
    "ILOAD_1" |
    "ILOAD_2" |
    "ILOAD_3" |
    "LLOAD_0" |
    "LLOAD_1" |
    "LLOAD_2" |
    "LLOAD_3" |
    "FLOAD_0" |
    "FLOAD_1" |
    "FLOAD_2" |
    "FLOAD_3" |
    "DLOAD_0" |
    "DLOAD_1" |
    "DLOAD_2" |
    "DLOAD_3" |
    "ALOAD_0" |
    "ALOAD_1" |
    "ALOAD_2" |
    "ALOAD_3" |
    "IALOAD" |
    "LALOAD" |
    "FALOAD" |
    "DALOAD" |
    "AALOAD" |
    "BALOAD" |
    "CALOAD" |
    "SALOAD" |
    "ISTORE" |
    "LSTORE" |
    "FSTORE" |
    "DSTORE" |
    "ASTORE" |
    "ISTORE_0" |
    "ISTORE_1" |
    "ISTORE_2" |
    "ISTORE_3" |
    "LSTORE_0" |
    "LSTORE_1" |
    "LSTORE_2" |
    "LSTORE_3" |
    "FSTORE_0" |
    "FSTORE_1" |
    "FSTORE_2" |
    "FSTORE_3" |
    "DSTORE_0" |
    "DSTORE_1" |
    "DSTORE_2" |
    "DSTORE_3" |
    "ASTORE_0" |
    "ASTORE_1" |
    "ASTORE_2" |
    "ASTORE_3" |
    "IASTORE" |
    "LASTORE" |
    "FASTORE" |
    "DASTORE" |
    "AASTORE" |
    "BASTORE" |
    "CASTORE" |
    "SASTORE" |
    "POP" |
    "POP2" |
    "DUP" |
    "DUP_X1" |
    "DUP_X2" |
    "DUP2" |
    "DUP2_X1" |
    "DUP2_X2" |
    "SWAP" |
    "IADD" |
    "LADD" |
    "FADD" |
    "DADD" |
    "ISUB" |
    "LSUB" |
    "FSUB" |
    "DSUB" |
    "IMUL" |
    "LMUL" |
    "FMUL" |
    "DMUL" |
    "IDIV" |
    "LDIV" |
    "FDIV" |
    "DDIV" |
    "IREM" |
    "LREM" |
    "FREM" |
    "DREM" |
    "INEG" |
    "LNEG" |
    "FNEG" |
    "DNEG" |
    "ISHL" |
    "LSHL" |
    "ISHR" |
    "LSHR" |
    "IUSHR" |
    "LUSHR" |
    "IAND" |
    "LAND" |
    "IOR" |
    "LOR" |
    "IXOR" |
    "LXOR" |
    "IINC" |
    "I2L" |
    "I2F" |
    "I2D" |
    "L2I" |
    "L2F" |
    "L2D" |
    "F2I" |
    "F2L" |
    "F2D" |
    "D2I" |
    "D2L" |
    "D2F" |
    "I2B" |
    "I2C" |
    "I2S" |
    "LCMP" |
    "FCMPL" |
    "FCMPG" |
    "DCMPL" |
    "DCMPG" |
    "IFEQ" |
    "IFNE" |
    "IFLT" |
    "IFGE" |
    "IFGT" |
    "IFLE" |
    "IF_ICMPEQ" |
    "IF_ICMPNE" |
    "IF_ICMPLT" |
    "IF_ICMPGE" |
    "IF_ICMPGT" |
    "IF_ICMPLE" |
    "IF_ACMPEQ" |
    "IF_ACMPNE" |
    "GOTO" |
    "JSR" |
    "RET" |
    "TABLESWITCH" |
    "LOOKUPSWITCH" |
    "IRETURN" |
    "LRETURN" |
    "FRETURN" |
    "DRETURN" |
    "ARETURN" |
    "RETURN" |
    "GETSTATIC" |
    "PUTSTATIC" |
    "GETFIELD" |
    "PUTFIELD" |
    "INVOKEVIRTUAL" |
    "INVOKESPECIAL" |
    "INVOKESTATIC" |
    "INVOKEINTERFACE" |
    "INVOKEDYNAMIC" |
    "NEW" |
    "NEWARRAY" |
    "ANEWARRAY" |
    "ARRAYLENGTH" |
    "ATHROW" |
    "CHECKCAST" |
    "INSTANCEOF" |
    "MONITORENTER" |
    "MONITOREXIT" |
    "WIDE" |
    "MULTIANEWARRAY" |
    "IFNULL" |
    "IFNONNULL" 			{ addToken(TokenTypes.RESERVED_WORD); }

}

<YYINITIAL> {

	{LineTerminator}				{ addNullToken(); return firstToken; }

	{WhiteSpace}+					{ addToken(Token.WHITESPACE); }

	/* String/Character Literals. */
	{CharLiteral}					{ addToken(Token.LITERAL_CHAR); }
	{UnclosedCharLiteral}			{ addToken(Token.ERROR_CHAR); /*addNullToken(); return firstToken;*/ }
	{StringLiteral}				{ addToken(Token.LITERAL_STRING_DOUBLE_QUOTE); }
	{UnclosedStringLiteral}			{ addToken(Token.ERROR_STRING_DOUBLE); addNullToken(); return firstToken; }

	/* Labels. */
	{Label}						{ addToken(Token.PREPROCESSOR); }

	^%({Letter}|{Digit})*			{ addToken(Token.FUNCTION); }

	/* Comment Literals. */
	{CommentBegin}.*				{ addToken(Token.COMMENT_EOL); addNullToken(); return firstToken; }

	/* Operators. */
	{Operator}					{ addToken(Token.OPERATOR); }

	/* Numbers */
	{Number}						{ addToken(Token.LITERAL_NUMBER_DECIMAL_INT); }

	/* Ended with a line not in a string or comment. */
	<<EOF>>						{ addNullToken(); return firstToken; }

	/* Catch any other (unhandled) characters. */
	{Identifier}					{ addToken(Token.IDENTIFIER); }
	.							{ addToken(Token.IDENTIFIER); }

}